{"name":"Eclipse Test Integration \"2.0\"","tagline":"Unofficial fork of Eclipse JDT JUnit plugin. This fork aims to provide a better visual experience of failed test results.","body":"# Features\r\n\r\nCurrently there are implemented 2 features \r\n\r\n* Showing ignored / skipped tests in Eclipse View\r\n* Showing nice comparison messages for some AssertJ failures.\r\n\r\n![Eclipse Test Integration 2.0](https://raw2.github.com/azachar/org.eclipse.jdt.ui/R4_3_1-bug-trace-beta/better-junit-testing-2_0.png)\r\n\r\n## Installation into Eclipse Kepler Workspace\r\n\r\n1. Clone the source code of the patched Eclipse plugins from \r\n  ```\r\n git clone -b R4_3_1_all-features-merged https://github.com/azachar/org.eclipse.jdt.ui\r\n  ```\r\n   \r\n2. Ensure that you are running Eclipse PDE Kepler SR-1.\r\n\r\n   Import the following projects into your workspace \r\n   \r\n ```\r\n org.eclipse.jdt.ui/org.eclipse.jdt.junit\r\n   \r\n org.eclipse.jdt.ui/org.eclipse.jdt.junit.core\r\n   \r\n org.eclipse.jdt.ui/org.eclipse.jdt.junit4.runtime\r\n ``` \r\n   Install these 3 plugins into your Eclipse Kepler by\r\n\r\n   a) Select the mentioned projects above and from the context menu choose **Export -> Deployable plug-ins and fragments** \r\n\r\n   b) Choose **Install into host. Repository**\r\n \r\n   c) Press Finish button and wait until it will be installed into your Eclipse Workspace Only (which enables you to test it).\r\n   \r\nNow you are able to see the nice comparison of failed fields in your junit view called \"Bug Trace\" that shows a quick overview of failed tests elements.\r\n\r\nAre you interested, wanted to see more? Check out beta version:\r\n\r\n### Beta\r\nIn the branch https://github.com/azachar/org.eclipse.jdt.ui/tree/R4_3_1-bug-trace-beta you can find the latest release of the pretty diff based visualization of failures. \r\n\r\n\r\n## Using AssertJ with nice failures visualization\r\nUsing previous enhanced Eclipse you can now extend your tests by the latest assertj fork that allows to do comparison like this:\r\n\r\n![Complex comparison for AssertJ](https://raw2.github.com/azachar/org.eclipse.jdt.ui/R4_3_1-bug-trace-beta/assertj-better-visualization.png)\r\n\r\n### Installation of the AssertJ fork with Comparisons\r\n1. Clone the source code from \r\n ```\r\n git clone -b 1_6_0_dev_fork_DescriptiveAssertionException https://github.com/azachar/assertj-core \r\n ```\r\n\r\n2. Compile assertj-core 1.6.0-snapshost by \r\n  ```\r\n  mvn clean install\r\n  ```\r\n3. Use assertJ's assertThat(a).isEqualToComparingFieldByField(b)\r\n   or simply import to your Eclipse this sample project and run as your junit project within your Eclipse.\r\n\r\n ```\r\n assertj-core/example\r\n ```\r\n\r\nAlso in the JUnit stacktrace view for some AssertJ exception (initially for comparison field by field of two objects) you click on the first line in the stacktrace of your failed test to open \"visual\" comparison.\r\n\r\n\r\n## Contact\r\n\r\nAre you interested, would you like to join? Contact me andrej at chocolate jar dot eu.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}