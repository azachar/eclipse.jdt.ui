{"name":"Eclipse Test Integration \"2.0\"","tagline":"This fork of Eclipse JDT feature aims to provide a better visual experience of failed test results.","body":"# New Features\r\n![Intro](https://f.cloud.github.com/assets/4659019/2266371/f737afde-9e96-11e3-9a73-202dac7e6520.png)\r\n\r\n* Elimination of search for a failure in the stack trace\r\n* Shows failures clearly in the new inline **Bug Trace** viewer \r\n* Shows colored differences between _expected_ and _actual_ values\r\n* Ability to filter ``@Ignored`` tests\r\n* Some complex failures from the AssertJ project (fork is provided here) are visualized in the inline __Bug trace__ view.\r\n* Ability to automatically show either the failure's stack trace or the bug trace.\r\n\r\n#### Screenshots\r\n***\r\n![Eclipse Test Integration 2.0](https://raw2.github.com/azachar/org.eclipse.jdt.ui/gh-pages/screenshots/better-junit-testing-2_0.png)\r\n***\r\n![Automatic Failures Widget](https://f.cloud.github.com/assets/4659019/2266318/b102ac2c-9e95-11e3-91eb-2d72afb47229.png)\r\n\r\n## Installation\r\nThe fork was developed with Eclipse Kepler 4.3.1 although there are branches for other releases too.\r\n\r\nThe installation consists of 2 parts:\r\n\r\n 1. The forked Eclipse JDT bundles\r\n 2. The forked AssertJ (optional)\r\n\r\n### 1.A Binary installation of Eclipse bundles\r\n\r\n1. Create the following folder \r\n ```\r\n <your-workspace>/.metadata/.plugins/org.eclipse.pde.core/install/plugins/\r\n ```\r\n\r\n2. Copy binaries from the release https://github.com/azachar/org.eclipse.jdt.ui/releases\r\n    and store them in the folder mentioned in the step 1. \r\n\r\n   This allows you to install and test binaries only into a specific workspace. If you want to install it into all workspaces store binaries instead of the mentioned workspace metadata folder into the standard `eclipse/dropins/` folder.\r\n\r\n3. Restart your Eclipse and run your tests.\r\n\r\n\r\n### 1.B Compilation from the source code\r\n\r\n1. Clone the source code of the forked Eclipse Kepler 4.3.2 from \r\n\r\n ```\r\n git clone -b R4_3_2-bug-trace https://github.com/azachar/org.eclipse.jdt.ui\r\n ```\r\n\r\n_If you are using a different Eclipse installation, choose another branch:_\r\n* ``master`` for the latest Eclipse Luna dev release\r\n* ``R4_3-bug-trace`` for Eclipse Kepler 4.3\r\n* ``R4_3_1-bug-trace`` for Eclipse Kepler 4.3.1\r\n* ``R4_3_2-bug-trace`` for Eclipse Kepler 4.3.2\r\n\r\n2. Import the following projects into your workspace \r\n   \r\n ```\r\n org.eclipse.jdt.ui/org.eclipse.jdt.junit\r\n   \r\n org.eclipse.jdt.ui/org.eclipse.jdt.junit.core\r\n   \r\n org.eclipse.jdt.ui/org.eclipse.jdt.junit4.runtime\r\n ``` \r\n   Install these 3 plugins into your Eclipse by doing the following:\r\n\r\n   a) Select the mentioned projects above and from the context menu choose **Export -> Deployable plug-ins and fragments** \r\n\r\n   b) Choose **Install into host. Repository**\r\n \r\n   c) Press Finish button and wait until it is installed into your Eclipse Workspace.\r\n\r\nNow you are able to see clearly the failures in your junit view called ****Bug Trace****. It shows a quick overview of failed tests elements.\r\n\r\n## AssertJ Fork\r\n\r\n### Colored failures\r\nI have modified the AssertJ project in order to provide a clearer view of failures. The fork allows you to visualize the following asserts:\r\n\r\n```\r\nassertThat(a).isEqualToComparingFieldByField(b)\r\n```\r\nHere is an example of a complex AssertJ failure\r\n![Complex comparison for AssertJ](https://raw2.github.com/azachar/org.eclipse.jdt.ui/gh-pages/screenshots/assertj-better-visualization.png)\r\n\r\n### 2.A Installation of the AssertJ fork\r\n1. Clone the source code \r\n ```\r\n git clone -b 1_6_0_dev_fork_DescriptiveAssertionException https://github.com/azachar/assertj-core \r\n ```\r\n\r\n2. Compile the artifact assertj-core:1.6.0-snapshot \r\n  ```\r\n  mvn clean install\r\n  ```\r\n\r\n3. Use AssertJ's ``assertThat(a).isEqualToComparingFieldByField(b)``\r\n   or simply import the sample project from ``assertj-core/example`` to your forked Eclipse and choose **Run As / JUnit Test** command.\r\n\r\nNow you can click on a AssertJ exception in the stack trace and Eclipse will show it's default comparison viewer or simply you can see a colored diff in the Bug Trace viewer like here:\r\n\r\n![Complex comparison for AssertJ](https://raw2.github.com/azachar/org.eclipse.jdt.ui/gh-pages/screenshots/assertj-better-visualization.png)\r\n\r\n## Contact\r\n\r\nAre you interested, would you like to join? Contact me andrej at chocolate jar dot eu.","google":"UA-48347805-1","note":"Don't delete this file! It's used internally to help with page regeneration."}